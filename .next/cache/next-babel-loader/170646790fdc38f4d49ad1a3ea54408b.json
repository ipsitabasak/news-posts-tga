{"ast":null,"code":"var _jsxFileName = \"/Users/ipsbasak/Desktop/TGA/news-posts-tga/pages/home/components/row/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Cell from '../cell';\n\nconst Row = props => {\n  const {\n    hits,\n    onMoreClick,\n    onTopClick,\n    onNewClick\n  } = props;\n  let cellValue = '';\n  const styles = {\n    maxWidth: '1400px',\n    display: 'inline-block',\n    width: '100%',\n    textAlign: 'left'\n  };\n\n  const style1 = _objectSpread({}, styles, {\n    backgroundColor: '#e8e2e1'\n  });\n\n  const style2 = _objectSpread({}, styles, {\n    backgroundColor: '#e3c4b6'\n  });\n\n  const rowHeader = __jsx(\"li\", {\n    key: \"rowHeader\",\n    className: \"header\",\n    style: _objectSpread({}, styles, {\n      backgroundColor: 'orange'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"Y \"), __jsx(\"button\", {\n    onClick: onTopClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, \"top\"), __jsx(\"button\", {\n    onClick: onNewClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, \"new\"));\n\n  const rows = hits.map((hit, index) => {\n    const rowStyle = index % 2 ? style1 : style2;\n    return __jsx(\"li\", {\n      style: rowStyle,\n      key: `row_${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, __jsx(Cell, {\n      hit: hit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }));\n  });\n\n  const moreFooter = __jsx(\"li\", {\n    key: \"moreFooter\",\n    className: \"footer\",\n    style: _objectSpread({}, styles, {\n      backgroundColor: 'orange'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    onClick: onMoreClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"MORE\"));\n\n  return [rowHeader, rows, moreFooter];\n};\n\nexport default Row;","map":{"version":3,"sources":["/Users/ipsbasak/Desktop/TGA/news-posts-tga/pages/home/components/row/index.js"],"names":["React","Component","Cell","Row","props","hits","onMoreClick","onTopClick","onNewClick","cellValue","styles","maxWidth","display","width","textAlign","style1","backgroundColor","style2","rowHeader","rows","map","hit","index","rowStyle","moreFooter"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AACnB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,UAArB;AAAiCC,IAAAA;AAAjC,MAAgDJ,KAAtD;AACA,MAAIK,SAAS,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAE,QADG;AAEbC,IAAAA,OAAO,EAAE,cAFI;AAGbC,IAAAA,KAAK,EAAE,MAHM;AAIbC,IAAAA,SAAS,EAAE;AAJE,GAAf;;AAMA,QAAMC,MAAM,qBACPL,MADO;AAEVM,IAAAA,eAAe,EAAE;AAFP,IAAZ;;AAIA,QAAMC,MAAM,qBACPP,MADO;AAEVM,IAAAA,eAAe,EAAE;AAFP,IAAZ;;AAIA,QAAME,SAAS,GACb;AAAI,IAAA,GAAG,EAAC,WAAR;AAAoB,IAAA,SAAS,EAAC,QAA9B;AAAuC,IAAA,KAAK,oBAAMR,MAAN;AAAcM,MAAAA,eAAe,EAAE;AAA/B,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAQ,IAAA,OAAO,EAAET,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,EAGE;AAAQ,IAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHF,CADF;;AAMA,QAAMW,IAAI,GAAGd,IAAI,CAACe,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACpC,UAAMC,QAAQ,GAAGD,KAAK,GAAC,CAAN,GAAUP,MAAV,GAAkBE,MAAnC;AACA,WACE;AAAI,MAAA,KAAK,EAAEM,QAAX;AAAqB,MAAA,GAAG,EAAG,OAAMD,KAAM,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAGD,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GAPY,CAAb;;AASA,QAAMG,UAAU,GACd;AAAI,IAAA,GAAG,EAAC,YAAR;AAAqB,IAAA,SAAS,EAAC,QAA/B;AAAwC,IAAA,KAAK,oBAAMd,MAAN;AAAcM,MAAAA,eAAe,EAAE;AAA/B,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAEV,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;;AAKA,SAAO,CAACY,SAAD,EAAYC,IAAZ,EAAkBK,UAAlB,CAAP;AACD,CAtCD;;AAwCA,eAAerB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from '../cell';\n\nconst Row = props => {\n  const { hits, onMoreClick, onTopClick, onNewClick } = props;\n  let cellValue = '';\n  const styles = {\n    maxWidth: '1400px',\n    display: 'inline-block',\n    width: '100%',\n    textAlign: 'left'\n  }\n  const style1 = {\n    ...styles,\n    backgroundColor: '#e8e2e1'\n  };\n  const style2 = {\n    ...styles,\n    backgroundColor: '#e3c4b6'\n  };\n  const rowHeader = (\n    <li key='rowHeader' className=\"header\" style={{...styles, backgroundColor: 'orange'}}>\n      <a>Y </a>\n      <button onClick={onTopClick}>top</button>\n      <button onClick={onNewClick}>new</button>\n  </li>);\n  const rows = hits.map((hit, index) => {\n    const rowStyle = index%2 ? style1: style2;\n    return (\n      <li style={rowStyle} key={`row_${index}`} >\n        <Cell hit={ hit } />\n      </li>\n    )\n  });\n\n  const moreFooter = (\n    <li key='moreFooter' className=\"footer\" style={{...styles, backgroundColor: 'orange'}}>\n      <button onClick={onMoreClick}>MORE</button>\n  </li>);\n\n  return [rowHeader, rows, moreFooter];\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}